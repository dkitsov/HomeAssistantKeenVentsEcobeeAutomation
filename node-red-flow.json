[{"id":"69807033.6009e","type":"tab","label":"Smart Vent Adjustment","disabled":false,"info":""},{"id":"11aae1a3.05cc9e","type":"comment","z":"69807033.6009e","name":"Adjust Vents Based on Set Temperatures and Heat/Cool Status","info":"Adjust vents based on room temperature and heat/cool status","x":280,"y":40,"wires":[]},{"id":"b5ad6742.2db728","type":"function","z":"69807033.6009e","name":"Vent Adjustments","func":"// constants\nconst position_fudge_factor = 5;\nconst min_bound = -100;\nconst max_bound = 100;\n\n// figure out what we're adjusting, and for heating or cooling\nvar settings;\nvar action;\nvar success = true;\n\ntry {\n    if (msg.payload.settings === undefined || \n        msg.payload.action === undefined) {\n            node.warn(\"incomplete parameters, aborting\");\n            success = false;\n    } else {\n        settings_name = msg.payload.settings;\n        action = msg.payload.action;\n        settings = flow.get(settings_name);\n        if (settings.vst === undefined ||\n            settings.thresholds === undefined) {\n            node.warn(\"no settings available for \" + parameters.settings);\n            success = false;    \n        }\n    }\n} catch (e) {\n    node.warn(\"error with parameters, aborting\");\n    success = false;\n}\n\nif (success) {\n  const globalHomeAssistant = global.get('homeassistant');\n  settings.vst.forEach(function (vst) {\n    // for each vent/sensor/target, compare the temperature\n    // with the target and generate a message adjusting the vent\n    // accordingly\n    node.warn(\"working with vent \" + vst.vent);\n    new_position = 8;\n    current_temp = globalHomeAssistant.homeAssistant.states[vst.sensor].state;\n    target_temp = globalHomeAssistant.homeAssistant.states[vst.target].state;\n    \n    // direction of the difference depends on whether we're heating or cooling\n    // calculate for heating first\n    diff = target_temp - current_temp;\n    node.warn(action + \": target temp = \" + target_temp + \", current temp = \" + current_temp + \", difference = \" + diff);\n    var new_position = -1;\n    settings.thresholds.forEach(function (threshold) {\n        var lower_bound = min_bound; // constant low enough to always be below the diff\n        var upper_bound = max_bound; // constant high enough to always be above the diff\n        if (threshold.lower_bound != undefined) {\n            lower_bound = threshold.lower_bound;\n        }\n        if (threshold.upper_bound != undefined) {\n            upper_bound = threshold.upper_bound;\n        }\n        if (lower_bound <= diff && diff < upper_bound) {\n            new_position = threshold.position;\n        }\n    });\n    if (new_position < 0) {\n        node.warn(\"no change in vent position, bad thresholds\")\n        return; // to the next loop iteration, since it's a forEach\n    } else {\n        node.warn(\"new vent position = \" + new_position);\n    }\n    // check to see if the current position is already the same\n    vent_entities = globalHomeAssistant.homeAssistant.states[vst.vent].attributes[\"entity_id\"];\n    node.warn(\"entities in group: \" + vent_entities);\n    vent_entities.forEach(function (vent_name) {\n      vent = globalHomeAssistant.homeAssistant.states[vent_name];\n      friendly_name = vent.attributes[\"friendly_name\"];\n      position = vent.attributes[\"current_position\"];\n      if (Math.abs(position - new_position) > position_fudge_factor) {\n        node.warn(friendly_name + \" currently at \" + position + \", changing position\");\n        new_msg = { payload: msg.payload, topic: msg.topic };\n        new_msg.payload = { \"vent_name\": friendly_name, \"data\": {\"entity_id\": vent_name, \"position\": new_position} };\n        node.send(new_msg);\n      } else {\n        node.warn(friendly_name + \" already at position \" + position);\n      }\n    });\n  });\n}\n\nreturn;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":790,"y":480,"wires":[["7fc63ccf.0b9464"]]},{"id":"49dcb4f1.0c87ac","type":"switch","z":"69807033.6009e","name":"Fan/Heat/Cool","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"fan","vt":"str"},{"t":"eq","v":"heating","vt":"str"},{"t":"eq","v":"cooling","vt":"str"}],"checkall":"true","repair":false,"outputs":3,"x":160,"y":360,"wires":[["4830338d.9531ec"],["e55e0bef.feb3d8"],["48527e60.d62fe"]]},{"id":"eb86b818.12a6f8","type":"looptimer","z":"69807033.6009e","duration":"150","units":"Second","maxloops":"100","maxtimeout":"1","maxtimeoutunits":"Hour","name":"Main Vent Timer","x":780,"y":100,"wires":[["49dcb4f1.0c87ac"],[]]},{"id":"4830338d.9531ec","type":"api-call-service","z":"69807033.6009e","name":"Open All Main Vents","server":"e65e1a44.281cd8","version":1,"debugenabled":false,"service_domain":"cover","service":"set_cover_position","entityId":"group.ecobee_main_vents","data":"{\"position\":100}","dataType":"json","mergecontext":"","mustacheAltTags":false,"output_location":"payload","output_location_type":"msg","x":420,"y":280,"wires":[[]]},{"id":"f0ead997.da8c78","type":"api-current-state","z":"69807033.6009e","name":"Ecobee Main Status","server":"db2ac89b.4ed308","version":1,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"sensor.ecobee_main_hvac_status","state_type":"str","blockInputOverrides":false,"override_topic":true,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":420,"y":100,"wires":[["eb86b818.12a6f8"]]},{"id":"71eaff.63bce5","type":"change","z":"69807033.6009e","name":"STOP if Ecobee Idle/Adjustments Disabled","rules":[{"t":"set","p":"payload","pt":"msg","to":"stop","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":490,"y":160,"wires":[["eb86b818.12a6f8"]]},{"id":"51ac893b.eccb68","type":"trigger-state","z":"69807033.6009e","name":"Ecobee Main Trigger","server":"db2ac89b.4ed308","exposeToHomeAssistant":false,"haConfig":[{"property":"name","value":""},{"property":"icon","value":""}],"entityid":"sensor.ecobee_main_hvac_status|input_boolean.vent_automation","entityidfiltertype":"regex","debugenabled":true,"constraints":[{"targetType":"entity_id","targetValue":"sensor.ecobee_main_hvac_status","propertyType":"current_state","comparatorType":"is_not","comparatorValueDatatype":"str","comparatorValue":"idle","propertyValue":"new_state.state"},{"targetType":"entity_id","targetValue":"input_boolean.vent_automation","propertyType":"current_state","comparatorType":"is","comparatorValueDatatype":"str","comparatorValue":"on","propertyValue":"new_state.state"}],"outputs":2,"customoutputs":[],"outputinitially":true,"state_type":"str","x":140,"y":160,"wires":[["f0ead997.da8c78"],["71eaff.63bce5"]]},{"id":"7fc63ccf.0b9464","type":"api-call-service","z":"69807033.6009e","name":"Adjust Vent Position","server":"db2ac89b.4ed308","version":1,"debugenabled":true,"service_domain":"cover","service":"set_cover_position","entityId":"","data":"","dataType":"json","mergecontext":"","mustacheAltTags":false,"output_location":"","output_location_type":"none","x":1040,"y":480,"wires":[[]]},{"id":"8970c6cc.ae77a8","type":"watch","z":"69807033.6009e","name":"Vent Settings Update","files":"/config/vent-settings","recursive":"","x":140,"y":880,"wires":[["f2500db4.c3e6","6b91203.6f6e5e","7507a9a4.0082a8","4e62df33.7401"]]},{"id":"f2500db4.c3e6","type":"file in","z":"69807033.6009e","name":"Main Vent Heat Settings","filename":"/config/vent-settings/main_heat.json","format":"utf8","chunk":false,"sendError":false,"encoding":"none","x":430,"y":860,"wires":[["aadfa2c.c0da56"]]},{"id":"504dd7ad.1c47b8","type":"inject","z":"69807033.6009e","name":"Initial Load","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":150,"y":960,"wires":[["f2500db4.c3e6","6b91203.6f6e5e","7507a9a4.0082a8","4e62df33.7401"]]},{"id":"aadfa2c.c0da56","type":"function","z":"69807033.6009e","name":"Store Main Heat Settings","func":"// sets the flow-context variable for main vent heat settings\ntry {\n    var settings = JSON.parse(msg.payload);\n    flow.set(\"main_heat\", settings);\n} catch (e) {\n    warn(\"error while parsing settings\");\n}","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":710,"y":860,"wires":[[]]},{"id":"e55e0bef.feb3d8","type":"change","z":"69807033.6009e","name":"Main Heat","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\"action\": \"heat\", \"settings\": \"main_heat\"}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":390,"y":340,"wires":[["b5ad6742.2db728"]]},{"id":"48527e60.d62fe","type":"change","z":"69807033.6009e","name":"Main Cool","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\"action\": \"cool\", \"settings\": \"main_cool\"}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":390,"y":400,"wires":[["b5ad6742.2db728"]]},{"id":"6b91203.6f6e5e","type":"file in","z":"69807033.6009e","name":"Main Vent Cool Settings","filename":"/config/vent-settings/main_cool.json","format":"utf8","chunk":false,"sendError":false,"encoding":"none","x":430,"y":900,"wires":[["de4d745e.cf8e68"]]},{"id":"7507a9a4.0082a8","type":"file in","z":"69807033.6009e","name":"Theatre Vent Heat Settings","filename":"/config/vent-settings/theatre_heat.json","format":"utf8","chunk":false,"sendError":false,"encoding":"none","x":440,"y":940,"wires":[["ee9c7fa2.7d5fc"]]},{"id":"4e62df33.7401","type":"file in","z":"69807033.6009e","name":"Theatre Vent Cool Settings","filename":"/config/vent-settings/theatre_cool.json","format":"utf8","chunk":false,"sendError":false,"encoding":"none","x":440,"y":980,"wires":[["541148b7.7fa3f8"]]},{"id":"de4d745e.cf8e68","type":"function","z":"69807033.6009e","name":"Store Main Cool Settings","func":"// sets the flow-context variable for main vent cool settings\ntry {\n    var settings = JSON.parse(msg.payload);\n    flow.set(\"main_cool\", settings);\n} catch (e) {\n    warn(\"error while parsing settings\");\n}","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":710,"y":900,"wires":[[]]},{"id":"ee9c7fa2.7d5fc","type":"function","z":"69807033.6009e","name":"Store Theatre Heat Settings","func":"// sets the flow-context variable for theatre heat settings\ntry {\n    var settings = JSON.parse(msg.payload);\n    flow.set(\"theatre_heat\", settings);\n} catch (e) {\n    warn(\"error while parsing settings\");\n}","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":720,"y":940,"wires":[[]]},{"id":"541148b7.7fa3f8","type":"function","z":"69807033.6009e","name":"Store Theatre Cool Settings","func":"// sets the flow-context variable for theatre cool settings\ntry {\n    var settings = JSON.parse(msg.payload);\n    flow.set(\"theatre_cool\", settings);\n} catch (e) {\n    warn(\"error while parsing settings\");\n}","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":720,"y":980,"wires":[[]]},{"id":"4372b4d2.93974c","type":"change","z":"69807033.6009e","name":"Theatre Heat","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\"action\": \"heat\", \"settings\": \"theatre_heat\"}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":390,"y":540,"wires":[["b5ad6742.2db728"]]},{"id":"bed57507.72f858","type":"change","z":"69807033.6009e","name":"Theatre Cool","rules":[{"t":"set","p":"payload","pt":"msg","to":"{\"action\": \"cool\", \"settings\": \"theatre_cool\"}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":390,"y":600,"wires":[["b5ad6742.2db728"]]},{"id":"9db238c0.8d5d98","type":"switch","z":"69807033.6009e","name":"Fan/Heat/Cool","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"fan","vt":"str"},{"t":"eq","v":"heating","vt":"str"},{"t":"eq","v":"cooling","vt":"str"}],"checkall":"true","repair":false,"outputs":3,"x":160,"y":560,"wires":[["490e9722.9cf9f8"],["4372b4d2.93974c"],["bed57507.72f858"]]},{"id":"7d702ebc.b175a","type":"looptimer","z":"69807033.6009e","duration":"150","units":"Second","maxloops":"100","maxtimeout":"1","maxtimeoutunits":"Hour","name":"Theatre Vent Timer","x":790,"y":720,"wires":[["9db238c0.8d5d98"],[]]},{"id":"490e9722.9cf9f8","type":"api-call-service","z":"69807033.6009e","name":"Open All Theatre Vents","server":"e65e1a44.281cd8","version":1,"debugenabled":false,"service_domain":"cover","service":"set_cover_position","entityId":"group.ecobee_theatre_vents","data":"{\"position\":100}","dataType":"json","mergecontext":"","mustacheAltTags":false,"output_location":"payload","output_location_type":"msg","x":420,"y":480,"wires":[[]]},{"id":"ea4f5a48.17ff08","type":"api-current-state","z":"69807033.6009e","name":"Ecobee Theatre Status","server":"db2ac89b.4ed308","version":1,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"sensor.ecobee_theatre_hvac_status","state_type":"str","blockInputOverrides":false,"override_topic":true,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":420,"y":720,"wires":[["7d702ebc.b175a"]]},{"id":"b576a82c.b8f308","type":"change","z":"69807033.6009e","name":"STOP if Ecobee Idle/Adjustments Disabled","rules":[{"t":"set","p":"payload","pt":"msg","to":"stop","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":490,"y":780,"wires":[["7d702ebc.b175a"]]},{"id":"7a84ee4b.ffe24","type":"trigger-state","z":"69807033.6009e","name":"Ecobee Theatre Trigger","server":"db2ac89b.4ed308","exposeToHomeAssistant":false,"haConfig":[{"property":"name","value":""},{"property":"icon","value":""}],"entityid":"sensor.ecobee_theatre_hvac_status|input_boolean.vent_automation","entityidfiltertype":"regex","debugenabled":true,"constraints":[{"targetType":"entity_id","targetValue":"sensor.ecobee_theatre_hvac_status","propertyType":"current_state","comparatorType":"is_not","comparatorValueDatatype":"str","comparatorValue":"idle","propertyValue":"new_state.state"},{"targetType":"entity_id","targetValue":"input_boolean.vent_automation","propertyType":"current_state","comparatorType":"is","comparatorValueDatatype":"str","comparatorValue":"on","propertyValue":"new_state.state"}],"outputs":2,"customoutputs":[],"outputinitially":true,"state_type":"str","x":150,"y":780,"wires":[["ea4f5a48.17ff08"],["b576a82c.b8f308"]]},{"id":"e65e1a44.281cd8","type":"server","name":"Home Assistant","legacy":false},{"id":"db2ac89b.4ed308","type":"server","name":"Home Assistant","addon":true}]